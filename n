#!/bin/bash

# fail on first error
set -e

# variables
NOTES_DIR=$HOME/.notes
NOTES_FILE=$(< $HOME/.notes/notes.rc);
NOTES_PATH="$NOTES_DIR"/"$NOTES_FILE"
TEMP_FILE="$NOTES_DIR"/temp
RC_FILE="$NOTES_DIR"/notes.rc
declare -i count
note_date=$(date +%d-%m-%Y)

_check_dirs_files()
{
  if ! [ -d "$NOTES_DIR" ]
  then
    mkdir "$NOTES_DIR"
  fi

  if ! [ -w "$NOTES_PATH" ]
  then
    touch "$NOTES_PATH"
  fi
}

_show_file()
{
  tput clear
  echo "$NOTES_FILE"
  echo
  cat -n "$1"
}

_get_num_lines()
{
  # declare variables based on the notes file
  declare -i count
  count=$(wc -l "$NOTES_PATH" | cut -f 1 -d " ")
}

_delete_line()
{
  head -n $(("$1" - 1 )) "$NOTES_PATH" > "$TEMP_FILE"
  tail -n +$(("$1" + 1)) "$NOTES_PATH" >> "$TEMP_FILE"
  cp "$TEMP_FILE" "$NOTES_PATH"
  _show_file "$NOTES_PATH"
}

#_get_line()
#{
#  declare -i num=$1
#  req_line=$(head -n "$num" "$NOTES_PATH" | tail -n +"$num")
#}

# check the dirs and files needed by the script
_check_dirs_files

# default, show a list of the notes --------------------------------------
# if the first argument length is zero (no first argument)
if [ -z "$1" ]
then
  # show the file
  _show_file "$NOTES_PATH"
  exit 0
fi
# ------------------------------------------------------------------------

# if the delete command is used
if [ "$1" == "del" ]
then
  # delete using an argument to the del option
  # check if the argument is an integer
  if  [ -n "$2" ] && [ "$2" -eq "$2" ] && [ "$2" -gt 0 ] 
  then
    _delete_line "$2"
  # and exit when done 
    exit 0
  else
    exit 2
  fi
fi

# new note ---------------------------------------------------------------
if [ "$1" == "new" ]
  then
    # declare an array
    declare -a out_line
    # create an array, iterate through the arguments,
    # except the first, adding them to the array.
    # Then copy the array to the file
    for item in "${@:2}"
    do
      out_line+=("$item")
    done
    # output the file
    echo "$note_date" "${out_line[@]}" >> "$NOTES_PATH"
    _show_file "$NOTES_PATH"
    exit 0
fi

# n ins 1 note here
if [ "$1" == "ins" ]
  then
    # declare variable
    declare -i ins_line
    declare -i not_line
    declare -a ins_note
    #set line to insert
    ins_line="$2"
    # set the not_line
    _get_num_lines
    not_line=$(wc -l "$NOTES_PATH" | cut -f 1 -d " ")

    # populate note array
    for item in "${@:3}"
    do
      ins_note+=("$item")
    done

    # check ins_line is an int
    if  [ ! "$ins_line" -eq "$ins_line" ] || [ "$ins_line" -lt 1 ] || [ "$ins_line" -gt $(("$not_line" + 1)) ]
      then
        #echo "$ins_line" is not a valid line number
        exit 2
    fi

    #test echo
    echo integer test passed
    echo "$ins_line" "${ins_note[@]}"
    # output files
    head -qn $(( "$ins_line" - 1 )) "$NOTES_PATH" > $TEMP_FILE
    echo "$note_date" "${ins_note[@]}" >> $TEMP_FILE
    tail -qn +"$ins_line" "$NOTES_PATH" >> $TEMP_FILE

    # cat the file
    tput clear
    cat -n $TEMP_FILE
    
    echo
    echo -n "Is this correct ? "
    read
    
    if [ "$REPLY" == "y" ]
    then
      cp $TEMP_FILE $NOTES_PATH
      tput clear
      cat -n $NOTES_PATH
    fi
fi

if [ "$1" == "file" ]
then
  echo "$2" > "$RC_FILE"
fi

# pseudo code for file command ------------------------------------------
# 1. overwrite the contents of the notes.rc file to be the name of the
#    new note file (note set a variable that holds the path to notes.rc)
# 2. set the variable that holds the notes file name to the new note file
# 3. Create the new notes file if it does not exist.

# Note, at the start of the script set the NOTES_FILE variable to the 
# contents of the script
# -----------------------------------------------------------------------
#
# pseudo code for insert command ---------------------------------------- 
# insert a note at a specific point in the file
# command will be called ins
# 
# 1. Get info from user *
#   1.1 Get line number and note from user *
#     1.1.1 Store line number in variable, (int) *
#   1.2 Get note *
#     1.2.1 Store not in a variable, (array) *
#   1.3 Check line number is valid *
#     1.3.1 Get number of lines in the file and store (int) *
#     1.3.2 Check line number an int *
#     1.3.4 Check inputted number is not less than 1 *
#     1.3.5 Check line number is not greater the number of existing lines + 1 *
# 2. Insert the line to the file
#   2.1 Copy the part of the file above the note to a temp file
#   2.2 Append the line from the user to the end of the temp file
#   2.3 Copy lines, including original line number, to the temp file
#   2.4 Show temp file to user
#   2.5 Ask user if this is ok
#     2.6.1 If ok copy temp file to notes file
#     2.6.2 If not quit
# 4. Show the result 
# ------------------------------------------------------------------------------
# edit note ---------------------------------------------------------------
#if [ "$1" == "edit" ]
# then
#  # get new input from the user
#  _get_line "$2"
#  echo "Editing line $2 : $req_line."
#  echo "Please enter replacement line"
#  read -r new_line
#  echo The new line, $2, is : "$note_date" "$new_line"
#  # make a temp file with the new line inserted
#  _set_file_vars
#fi
