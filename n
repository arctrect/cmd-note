#!/bin/bash

# fail on first error
set -e

# constant variables
NOTES_DIR=$HOME/.notes
# export NOTES_FILE=notes
NOTES_FILE=notes
NOTES_PATH="$NOTES_DIR"/"$NOTES_FILE"
TEMP_FILE="$NOTES_DIR"/temp
declare -i count
note_date=$(date +%d-%m-%Y)

_check_dirs_files()
{
  if ! [ -d "$NOTES_DIR" ]
  then
    mkdir "$NOTES_DIR"
  fi

  if ! [ -w "$NOTES_PATH" ]
  then
    touch "$NOTES_PATH"
  fi
}

_show_file()
{
  tput clear
  cat -n "$1"
}

_get_num_lines()
{
  # declare variables based on the notes file
  declare -i count
  count=$(wc -l "$NOTES_PATH" | cut -f 1 -d " ")
  return "$count"
}

_delete_line()
{
  head -n $(("$1" - 1 )) "$NOTES_PATH" > "$TEMP_FILE"
  tail -n +$(("$1" + 1)) "$NOTES_PATH" >> "$TEMP_FILE"
  cp "$TEMP_FILE" "$NOTES_PATH"
  _show_file "$NOTES_PATH"
}

#_get_line()
#{
#  declare -i num=$1
#  req_line=$(head -n "$num" "$NOTES_PATH" | tail -n +"$num")
#}

# check the dirs and files needed by the script
_check_dirs_files

# default, show a list of the notes --------------------------------------
# if the first argument length is zero (no first argument)
if [ -z "$1" ]
then
  # show the file
  _show_file "$NOTES_PATH"
  exit 0
fi
# ------------------------------------------------------------------------

# if the delete command is used
if [ "$1" == "del" ]
then
  # delete using an argument to the del option
  # check if the argument is an integer
  if  [ -n "$2" ] && [ "$2" -eq "$2" ] && [ "$2" -gt 0 ] 
  then
    _delete_line "$2"
  # and exit when done 
    exit 0
  else
    exit 2
  fi
fi

# new note ---------------------------------------------------------------
if [ "$1" == "new" ]
  then
    # declare an array
    declare -a out_line
    # create an array, iterate through the arguments,
    # except the first, adding them to the array.
    # Then copy the array to the file
    for item in "${@:2}"
    do
      out_line+=("$item")
    done
    # output the file
    echo "$note_date" "${out_line[@]}" >> "$NOTES_PATH"
    _show_file "$NOTES_PATH"
    exit 0
fi

# edit note ---------------------------------------------------------------
#if [ "$1" == "edit" ]
# then
#  # get new input from the user
#  _get_line "$2"
#  echo "Editing line $2 : $req_line."
#  echo "Please enter replacement line"
#  read -r new_line
#  echo The new line, $2, is : "$note_date" "$new_line"
#  # make a temp file with the new line inserted
#  _set_file_vars
#fi
